{"mappings":"AAAA,IAAMA,KAAOC,SAASC,cAAc,QAC9BC,KAAOF,SAASC,cAAc,SAC9BE,WAAaH,SAASC,cAAc,eAE1CC,KAAKE,iBAAiB,UAAU,SAACC,GAC7BA,EAAMC,iBAENC,YACHC,MAAK,SAAAC,G,OAAQV,KAAKW,UAAYX,KAAKW,UAAYC,YAAYF,EAAKG,Q,IACvBC,OAAnC,SAAAC,GAAUC,QAAQD,MAAMA,E,OAG/B,IAAMP,UAAY,WAEd,OAAOS,MAAM,GAAcC,OADV,0BAC2BA,OAAjBd,WAAWe,QACrCV,MAAK,SAAAW,GACJ,IAAKA,EAAIC,GACT,MAAM,IAAIC,MAAMF,EAAIG,YAE4H,OAA/IH,EAAII,M,KAMLZ,YAAc,SAACF,GACjB,IAAIe,EAAS,GAkCjB,OAhCQC,MAAMC,QAAQjB,KACde,EAASf,EAAKkB,KAAI,SAAAC,GACd,OAAIA,EAAKC,KACE,gEAGcZ,OADFW,EAAKC,KAAK,6CAEVZ,OADEW,EAAKE,OAAO,8CAERb,OADNW,EAAKG,KAAK,oDACYd,OAAhBW,EAAKI,WAAW,qDAGlCJ,EAAKK,MACL,iEAGoBhB,OADPW,EAAKK,MAAM,mDAERhB,OADIW,EAAKM,SAAS,+CACAjB,OAAlBW,EAAKO,aAAa,kJAIlCP,EAAKC,KACL,gEAGeZ,OADHW,EAAKC,KAAK,8CAEJZ,OADHW,EAAKQ,QAAQ,iDACMnB,OAAhBW,EAAKS,WAAW,wJALtC,C,IAUhBC,KAAK,KAEDd,C","sources":["src/js/starWars.js"],"sourcesContent":["const list = document.querySelector('body');\nconst form = document.querySelector('.form');\nconst selectList = document.querySelector('#selectList');\n\nform.addEventListener('submit', (event) => {\n    event.preventDefault();\n    //console.log(selectList.value);\n    starsWars()\n.then(data => list.innerHTML = list.innerHTML = creatMakeup(data.results))//console.log(data) //выводит в консоль ркзультат исполнение функции starsWars()\n.catch(error => {console.error(error);});\n});\n\nconst starsWars = () => {\n    const BASE_URL = 'https://swapi.dev/api/';\n    return fetch(`${BASE_URL}${selectList.value}`)\n    .then(res => //console.log(res) // Это метод промиса, который выполняется после завершения запроса. Он принимает функцию обратного вызова, которая будет вызвана с результатом запроса.\n     {if (!res.ok) {\n      throw new Error(res.statusText); //Эта проверка выполняется для убедительности в том, что запрос завершился успешно (HTTP-статус 200). Если статус не 200, значит возникла ошибка, и функция выбрасывает исключение с текстом ошибки. \n     }\nreturn res.json();\n    }\n)\n};\n //console.log(starsWars());\n\nconst creatMakeup = (data) => {\n    let markup = '';\n    \n    if (Array.isArray(data)) {\n        markup = data.map(item => {\n            if (item.name) { // Проверяем наличие свойства \"name\", чтобы определить, что это персонаж\n                return `\n                    <li>\n                        <p>Name: ${item.name}</p>\n                        <p>Height: ${item.height} cm</p>\n                        <p>Mass: ${item.mass} kg</p>\n                        <p>Hair Color: ${item.hair_color}</p>\n                    </li>\n                `;\n            } else if (item.title) { // Проверяем наличие свойства \"title\", чтобы определить, что это фильм\n                return `\n                    <li>\n                        <p>Title: ${item.title}</p>\n                        <p>Release Date: ${item.director}</p>\n                        <p>Director: ${item.release_date}</p>\n                        <!-- Другие свойства фильма, которые вы хотите отобразить -->\n                    </li>\n                `;\n            } else if (item.name) { // Проверяем наличие свойства \"name\", чтобы определить, что это планета\n                return `\n                    <li>\n                        <p>Name: ${item.name}</p>\n                        <p>Climate: ${item.climate}</p>\n                        <p>Population: ${item.population}</p>\n                        <!-- Другие свойства планеты, которые вы хотите отобразить -->\n                    </li>\n                `;\n            }\n}).join('');\n}\nreturn markup;\n};"],"names":["list","document","querySelector","form","selectList","addEventListener","event","preventDefault","starsWars","then","data","innerHTML","creatMakeup","results","catch","error","console","fetch","concat","value","res","ok","Error","statusText","json","markup","Array","isArray","map","item","name","height","mass","hair_color","title","director","release_date","climate","population","join"],"version":3,"file":"starWars.eb3f5b80.js.map"}