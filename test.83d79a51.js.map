{"mappings":"AA2CkG,IAA5FA,KAAOC,SAASC,cAAc,eAC9BC,KAAOF,SAASC,cAAc,cAE9BE,SAAW,SAAAC,GACfA,EAAIC,iBACJ,IAGIC,EAAAF,EAAIG,cAAcC,SAFXC,EAEPH,EAFFG,MAASC,MACDC,EACNL,EADFK,KAAQD,MAIV,IAAID,EACF,OAAOG,MAAM,aAEfC,WAAWJ,EAAOE,GACjBG,MAAK,SAAAC,G,OAAQb,KAAKc,UAAYC,YAAYF,EAAKG,SAASC,aACxDC,OAAM,SAAAC,G,OAAOC,QAAQC,IAAIF,E,QAKtBR,WAAa,W,IAACJ,EAAKe,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,SAAUb,EAAIa,UAAAC,OAAA,YAAAD,UAAA,GAAAA,UAAA,GAAG,EACrCE,EAAW,8CACXC,EAAU,kCAChB,OAAOC,MAAM,GAAmBC,OAAhBH,EAAS,SAAoBG,OAAbF,EAAQ,OAAmBE,OAAdpB,EAAM,UAAaoB,OAALlB,IAAQG,MACjE,SAAAgB,GAGI,IAAKA,EAAKC,GACR,MAAM,IAAIC,MAAMF,EAAKG,YAEvB,OAAOH,EAAKI,M,KAKpBnC,KAAKoC,iBAAiB,SAAUhC,UAEhC,IAAMc,YAAc,SAAAmB,GAEQ,OAAnBA,EACJC,KACC,SAAAC,G,QACEC,IAAGC,EAAAC,EACDC,UAAaC,EAAIH,EAAJG,KAAMC,EAAIJ,EAAJI,KACnBC,EAASJ,EAATI,UAEFC,EAAIR,EAAJQ,K,MAGC,2BACyBjB,OAAdc,EAAK,WACLd,OADce,EAAK,0BAEff,OADAe,EAAK,6BAEUf,OADfiB,EAAK,4CACgBjB,OAAVgB,EAAU,oB,IAGxCE,KAAK,G","sources":["src/js/test.js"],"sourcesContent":["//Сервер - це комп'ютер зі спеціальним програмним забезпеченням.\n//Бекенд - це програма, розташована на сервері, здатна обробити вхідні HTTP-запити і має набір готових дій на певні запити.\n//API (інтерфейс прикладного програмування) - набір чітко визначених правил зв'язку між різними програмними компонентами. Інтерфейс описує, що можна попросити програму зробити і що буде в результаті.\n//REST (representational state transfer) - стиль бекенд-архітектури, ґрунтується на наборі принципів, які описують, яким чином визначаються і адресуються мережеві ресурси.\n//REST API - бекенд побудований за принципом REST. Слугує прошарком між веб-застосунком і базою даних. Має стандартний інтерфейс для звернення до ресурсів. Працює як веб-сайт, ми посилаємо HTTP-запит з клієнта на сервер, а у відповідь, заміст1ь HTML-сторінки, отримуємо дані в JSON-форматі.\n//AJAX (Asynchronous JavaScript and XML) - метод отримання або відправлення даних з подальшим оновленням інтерфейсу за цими даними, без потреби перезавантаження сторінки. Завдяки цьому зменшується час відгуку і веб-сторінка стає інтерактивнішою. Цей процес можна розібрати на прикладі завантаження даних.\n\n//запиту інформації про колекції несправжніх користувачів\n// const fetchUsersBtn = document.querySelector(\".btn\");\n// const userList = document.querySelector(\".user-list\");\n\n// fetchUsersBtn.addEventListener(\"click\", () => {\n//   fetchUsers()\n//     .then((users) => renderUsers(users))\n//     .catch((error) => console.log(error));\n// });\n\n// function fetchUsers() {\n//   return fetch(\"https://jsonplaceholder.typicode.com/users\")\n//   .then((response) => {\n//       if (!response.ok) {\n//         throw new Error(response.status);\n//       }\n//       return response.json();\n//     }\n//   );\n// }\n\n// function renderUsers(users) {\n//   const markup = users\n//     .map((user) => {\n//       return `<li>\n//           <p><b>Name</b>: ${user.name}</p>\n//           <p><b>Email</b>: ${user.email}</p>\n//           <p><b>Company</b>: ${user.company.name}</p>\n//         </li>`;\n//     })\n//     .join(\"\");\n//   userList.insertAdjacentHTML(\"beforeend\", markup);\n// }\n\n// Weather\n//Алгоритм: 1- створюємо запрос на сервер тобто функція weatherApi; 2 - створюємо функцію обробника події onSearch; 3 - створюємо нашу нову розмітку creatMakeUp\nconst form = document.querySelector('.js-weather');\nconst list = document.querySelector('.user-list');\n\nconst onSearch = evt => {\n  evt.preventDefault();\n  const {\n    query: { value: query },\n    days: { value: days },\n  } = evt.currentTarget.elements; //это это элемент формы с атрибутом name=\"query\" и name=\"days\" соответственно, evt.currentTarget.elements - эта коллекция содержит все элементы формы (input, select, textarea и т. д.).\n  // console.log(query); // возвращает сам текст введенный в атрибут name=\"query\" и name=\"days\" соответственно\n  //console.log(days);\n  if(!query){    //обробка пустого рядка\n    return alert('add value')\n  }\n  weatherApi(query, days)\n  .then(data => list.innerHTML = creatMakeUp(data.forecast.forecastday)\n  .catch(err => console.log(err)) //обробка помилки\n  );\n  //console.log(data.forecast.forecastday));\n};\n\nconst weatherApi = (query = 'Prague', days = 3) => {\n  const BASE_URL = 'https://api.weatherapi.com/v1/forecast.json';\n  const API_KEY = '94a040c94bab4dcabf9130808222712';\n  return fetch(`${BASE_URL}?key=${API_KEY}&q=${query}&days=${days}`).then(\n    resp =>\n      //console.log(resp)\n      {\n        if (!resp.ok) {\n          throw new Error(resp.statusText);\n        }\n        return resp.json();\n      }\n  );\n};\n\nform.addEventListener('submit', onSearch);\n\nconst creatMakeUp = arr => {\n  //console.log(arr);  //проверяем или прищел наш масив creatMakeUp(data.forecast.forecastday)\n  return arr\n    .map(\n      ({\n        day: {\n          condition: { icon, text },\n          avgtemp_c,\n        },\n        date,\n      }) =>\n        //console.log(icon, text, avgtemp_c, date);\n        `<li>\n        <img src=\"${icon}\" alt=\"${text}\">\n        <h2>Опис: ${text}</h2>\n        <h3>Дата: ${date}</h3>\n        <h4>Середня температура: ${avgtemp_c}</h4>\n    </li> `\n    )\n    .join('')\n};\n"],"names":["form","document","querySelector","list","onSearch","evt","preventDefault","_elements","currentTarget","elements","query","value","days","alert","weatherApi","then","data","innerHTML","creatMakeUp","forecast","forecastday","catch","err","console","log","arguments","length","BASE_URL","API_KEY","fetch","concat","resp","ok","Error","statusText","json","addEventListener","arr","map","param","day","_condition","_day","condition","icon","text","avgtemp_c","date","join"],"version":3,"file":"test.83d79a51.js.map"}